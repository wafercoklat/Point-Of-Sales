// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	salesorder "STACK-GO/modules/ar_salesorder/domain"

	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// Create provides a mock function with given fields: mdl
func (_m *Services) Create(mdl salesorder.SalesorderPackage) (int, error) {
	ret := _m.Called(mdl)

	var r0 int
	if rf, ok := ret.Get(0).(func(salesorder.SalesorderPackage) int); ok {
		r0 = rf(mdl)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(salesorder.SalesorderPackage) error); ok {
		r1 = rf(mdl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Services) Delete(id string) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Services) FindByID(id string) (*salesorder.SalesorderPackage, error) {
	ret := _m.Called(id)

	var r0 *salesorder.SalesorderPackage
	if rf, ok := ret.Get(0).(func(string) *salesorder.SalesorderPackage); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*salesorder.SalesorderPackage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Services) List() (*[]salesorder.Salesorder, error) {
	ret := _m.Called()

	var r0 *[]salesorder.Salesorder
	if rf, ok := ret.Get(0).(func() *[]salesorder.Salesorder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]salesorder.Salesorder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, mdl
func (_m *Services) Update(id string, mdl salesorder.SalesorderPackage) (int, error) {
	ret := _m.Called(id, mdl)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, salesorder.SalesorderPackage) int); ok {
		r0 = rf(id, mdl)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, salesorder.SalesorderPackage) error); ok {
		r1 = rf(id, mdl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewServices creates a new instance of Services. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServices(t mockConstructorTestingTNewServices) *Services {
	mock := &Services{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
